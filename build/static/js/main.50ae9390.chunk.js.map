{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","newTaskTitle","setTitle","error","setError","onCLickAddTaskHandler","trim","addItem","TextField","variant","id","label","value","onChange","event","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","EditableSpan","editMode","setEditMode","title","newEditableTitle","target","onBlur","onChangeInTitleTask","autoFocus","onDoubleClick","Task","changeValueHandler","useCallback","newValue","changeTaskTitle","task","todoListID","className","isDone","Checkbox","checked","changeStatus","removeTask","Delete","TodoList","console","log","onCLickAllFilterHandler","changeFilter","onCLickActiveFilterHandler","onCLickCompletedFilterHandler","addTask","changeTodoListTitle","newTitle","tasksForTodoList","tasks","filter","Typography","removeTodoList","map","Button","initialState","AppWithRedux","dispatch","useDispatch","toDoLists","useSelector","state","todolists","toDoListID","action","type","addTaskAC","taskID","todolistId","changeStatusTaskAC","changeTitleTaskAC","addNewToDoList","v1","addTodolistTitleAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Container","fixed","Grid","container","style","padding","spacing","toDoList","item","Paper","rootReducer","combineReducers","todolist","filteredList","find","stateCopy","filteredTasks","newTask","newTasks","findToDoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.50ae9390.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport AddCircleOutlineSharpIcon from '@material-ui/icons/AddCircleOutlineSharp';\n\nexport type AddItemFormPropsType = {\n\taddItem: (title: string) => void\n}\n\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\n\tconst [newTaskTitle, setTitle] = useState('');\n\tconst [error, setError] = useState<string | null>(null);\n\n\tconst onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTitle(event.currentTarget.value)\n\t}\n\n\tconst onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n\t\tif (error !== null) {\n\t\t\tsetError(null);\n\t\t}\n\t\tif (event.key === 'Enter') {\n\t\t\tonCLickAddTaskHandler();\n\t\t}\n\t}\n\n\tconst onCLickAddTaskHandler = () => {\n\t\tif (newTaskTitle.trim() !== '') {\n\t\t\tprops.addItem(newTaskTitle.trim());\n\t\t\tsetTitle('');\n\t\t} else {\n\t\t\tsetError('This field is required')\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{/*<input value={newTaskTitle} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}*/}\n\t\t\t{/*\t\t\t className={error ? 'input-error' : ''}/>*/}\n\t\t\t<TextField variant={'outlined'} id=\"outlined-basic\" label=\"Enter your task..\"\n\t\t\t\t\t\t\t\t value={newTaskTitle} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}\n\t\t\t\t\t\t\t\t error={!!error}\n\t\t\t\t\t\t\t\t helperText={error}\n\t\t\t/>\n\t\t\t<IconButton onClick={onCLickAddTaskHandler} color={'primary'}> <AddCircleOutlineSharpIcon/> </IconButton>\n\t\t\t{/*{error && <div className='error-message'>{error}</div>}*/}\n\t\t</div>\n\t)\n})\n\n\nexport default AddItemForm","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\nexport type EditableSpanPropsType = {\n\ttitle: string\n\tonChangeInTitleTask: (newValue: string) => void\n}\nexport  const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\tconst [editMode, setEditMode] = useState<boolean>(false);\n\tconst [title, setTitle] = useState<string>('');\n\n\tconst activateChangeMode = () => {\n\t\tsetEditMode(true)\n\t\tsetTitle(props.title)\n\t}\n\n\tconst disableChangeMode = () => {\n\t\tsetEditMode(false)\n\t\tprops.onChangeInTitleTask(title)\n\t}\n\n\tconst changeTitleIfEditModeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tconst newEditableTitle = event.target.value;\n\t\tsetTitle(newEditableTitle)\n\t}\n\n\treturn (\n\t\teditMode ?\n\t\t\t<TextField value={title} onChange={ changeTitleIfEditModeHandler } onBlur={ disableChangeMode } autoFocus/>\n\t\t\t:\n\t\t\t<span onDoubleClick={activateChangeMode}>{props.title}</span>\n\t)\n})","import React, {ChangeEvent, useCallback} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {EditableSpan} from './EditableSpan';\nimport {IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {TaskType} from './App';\n\nexport type TaskPropsType = {\n\tchangeTaskTitle: (id: string, newTitle: string, toDoListID: string) => void\n\tremoveTask: (id: string, toDoListID: string) => void\n\tchangeStatus: (id: string, isDone: boolean, toDoListID: string) => void\n\ttask: TaskType\n\ttodoListID: string\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n\n\tconst removeTaskHandler = () => {\n\t\tprops.removeTask(props.task.id, props.todoListID)\n\t}\n\tconst changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tprops.changeStatus(props.task.id, event.currentTarget.checked, props.todoListID)\n\t}\n\n\tconst changeValueHandler = useCallback((newValue: string) => {\n\t\tprops.changeTaskTitle(props.task.id, newValue, props.todoListID)\n\t}, [props.changeTaskTitle, props.task.id, props.todoListID])\n\n\treturn <li key={props.task.id} className={props.task.isDone ? 'completed' : ''}>\n\t\t<Checkbox checked={props.task.isDone} onChange={changeStatus} color={'primary'}/>\n\n\t\t<EditableSpan title={props.task.title} onChangeInTitleTask={changeValueHandler}/>\n\t\t<IconButton onClick={removeTaskHandler} color={'primary'}><Delete/></IconButton>\n\t</li>\n\n})","import React, {useCallback} from 'react';\nimport {FilterValuesType, TaskType} from './App';\nimport AddItemForm from './AddItemForm';\nimport {Button, IconButton, Typography} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {EditableSpan} from './EditableSpan';\nimport {Task} from './Task';\n\ntype PropsType = {\n\tid: string\n\tfilter: FilterValuesType\n\ttitle: string\n\ttasks: Array<TaskType>\n\taddTask: (title: string, toDoListID: string) => void\n\tchangeFilter: (value: FilterValuesType, id: string) => void\n\tremoveTodoList: (toDoListID: string) => void\n\tchangeTaskTitle: (id: string, newTitle: string, toDoListID: string) => void\n\tremoveTask: (id: string, toDoListID: string) => void\n\tchangeStatus: (id: string, isDone: boolean, toDoListID: string) => void\n\tchangeTodoListTitle: (id: string, newTitle: string) => void\n}\n\nexport const TodoList = React.memo((props: PropsType) => {\n\tconsole.log('TodoList is rendered')\n\n\tconst onCLickAllFilterHandler = useCallback(() => props.changeFilter('all', props.id), [props.changeFilter, props.id])\n\tconst onCLickActiveFilterHandler = useCallback(() => props.changeFilter('active', props.id), [props.changeFilter, props.id])\n\tconst onCLickCompletedFilterHandler = useCallback(() => props.changeFilter('completed', props.id), [props.changeFilter, props.id])\n\tconst removeTodoList = () => props.removeTodoList(props.id)\n\n\tconst addTask = useCallback((title: string) => {\n\t\tprops.addTask(title, props.id)\n\t}, [props.addTask, props.id])\n\n\tconst changeTodoListTitle = useCallback((newTitle: string) => props.changeTodoListTitle(props.id, newTitle), [props.changeTodoListTitle, props.id])\n\n\tlet tasksForTodoList = props.tasks\n\n\tif (props.filter === 'completed') {\n\t\ttasksForTodoList = props.tasks.filter(task => task.isDone === true)\n\t}\n\n\tif (props.filter === 'active') {\n\t\ttasksForTodoList = props.tasks.filter(task => task.isDone === false)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t<div className={'box'}>\n\t\t\t\t\t<Typography variant={'h5'}>\n\t\t\t\t\t\t<EditableSpan title={props.title} onChangeInTitleTask={changeTodoListTitle}/>\n\t\t\t\t\t\t<IconButton onClick={removeTodoList} color={'primary'}><Delete/></IconButton>\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<AddItemForm addItem={addTask}/>\n\t\t\t</div>\n\t\t\t<ul>\n\t\t\t\t{\n\t\t\t\t\ttasksForTodoList.map(task => {\n\t\t\t\t\t\treturn <Task\n\t\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\t\tchangeTaskTitle={props.changeTaskTitle}\n\t\t\t\t\t\t\tremoveTask={props.removeTask}\n\t\t\t\t\t\t\tchangeStatus={props.changeStatus}\n\t\t\t\t\t\t\ttodoListID={props.id}\n\t\t\t\t\t\t\tkey={task.id}\n\t\t\t\t\t\t/>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ul>\n\t\t\t<div>\n\t\t\t\t<Button onClick={onCLickAllFilterHandler} color={'primary'}\n\t\t\t\t\t\t\t\tvariant={props.filter === 'all' ? 'contained' : 'text'}>All</Button>\n\t\t\t\t<Button onClick={onCLickActiveFilterHandler} color={'primary'}\n\t\t\t\t\t\t\t\tvariant={props.filter === 'active' ? 'contained' : 'text'}>Active\n\t\t\t\t</Button>\n\t\t\t\t<Button onClick={onCLickCompletedFilterHandler} color={'primary'}\n\t\t\t\t\t\t\t\tvariant={props.filter === 'completed' ? 'contained' : 'text'}>Completed</Button>\n\t\t\t</div>\n\t\t</div>\n\t)\n})\n\n","import {FilterValuesType, TodoListType} from '../App';\nimport {v1} from 'uuid';\n\n\nexport type removeTodoListActionType = {\n\ttype: 'REMOVE-TODOLIST'\n\tid: string\n}\n\nexport type addTodoListActionType = {\n\ttype: 'ADD-TODOLIST'\n\ttitle: string\n\ttodolistId: string\n}\n\ntype changeTodoListTitleActionType = {\n\ttype: 'CHANGE-TODOLIST-TITLE'\n\ttitle: string\n\tid: string\n}\n\ntype changeTodoListFilterActionType = {\n\ttype: 'CHANGE-TODOLIST-FILTER'\n\tfilter: FilterValuesType\n\tid: string\n}\n\n\nconst initialState: Array<TodoListType> = []\n\n\ntype ActionsType = removeTodoListActionType | addTodoListActionType | changeTodoListTitleActionType | changeTodoListFilterActionType\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionsType): Array<TodoListType> => {\n\tswitch (action.type) {\n\t\tcase 'REMOVE-TODOLIST': {\n\t\t\treturn state.filter(todolist => todolist.id !== action.id);\n\t\t}\n\t\tcase 'ADD-TODOLIST': {\n\t\t\treturn [ {\n\t\t\t\tid: action.todolistId,\n\t\t\t\ttitle: action.title,\n\t\t\t\tfilter: 'all'\n\t\t\t}, ...state]\n\t\t}\n\t\tcase 'CHANGE-TODOLIST-TITLE': {\n\t\t\tconst filteredList = state.find(todolist => todolist.id === action.id);\n\t\t\tif (filteredList) {\n\t\t\t\tfilteredList.title = action.title\n\t\t\t}\n\t\t\treturn [...state]\n\t\t}\n\t\tcase 'CHANGE-TODOLIST-FILTER': {\n\t\t\tconst filteredList = state.find(todolist => todolist.id === action.id);\n\t\t\tif (filteredList) {\n\t\t\t\tfilteredList.filter = action.filter\n\t\t\t}\n\t\t\treturn [...state]\n\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const removeTodolistAC = (todolistId: string): removeTodoListActionType => {\n\treturn { type: 'REMOVE-TODOLIST', id: todolistId}\n}\n\nexport const addTodolistTitleAC = (title: string):  addTodoListActionType=> {\n\treturn { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\n}\n\nexport const changeTodolistTitleAC = (title: string, id: string):  changeTodoListTitleActionType=> {\n\treturn { type: 'CHANGE-TODOLIST-TITLE', title: title, id: id}\n}\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string):  changeTodoListFilterActionType=> {\n\treturn { type: 'CHANGE-TODOLIST-FILTER', filter: filter, id: id}\n}\n","import {TaskStateType, TaskType} from '../App';\nimport {v1} from 'uuid';\nimport {addTodoListActionType, removeTodoListActionType} from './todolists-reducer';\n\n\ntype removeTaskACType = {\n\ttype: 'REMOVE-TASK'\n\ttaskID: string\n\ttodolistId: string\n}\n\ntype addTaskACType = {\n\ttype: 'ADD-TASK'\n\ttitle: string\n\ttoDoListID: string\n}\n\ntype changeStatusTaskACType = {\n\ttype: 'CHANGE-STATUS-TASK'\n\tid: string\n\tisDone: boolean\n\ttoDoListID: string\n}\n\ntype changeTitleTaskACType = {\n\ttype: 'CHANGE-TITLE-TASK'\n\tid: string\n\ttitle: string\n\ttoDoListID: string\n}\n\n\ntype ActionsType =\n\tremoveTaskACType\n\t| addTaskACType\n\t| changeStatusTaskACType\n\t| changeTitleTaskACType\n\t| addTodoListActionType\n\t| removeTodoListActionType\n\nconst initialState: TaskStateType = {}\n\n\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsType): TaskStateType => {\n\tswitch (action.type) {\n\t\tcase 'REMOVE-TASK': {\n\t\t\tconst stateCopy = {...state};\n\n\t\t\tconst tasks = state[action.todolistId];\n\t\t\tconst filteredTasks = tasks.filter(task => task.id !== action.taskID)\n\n\t\t\tstateCopy[action.todolistId] = filteredTasks\n\t\t\treturn stateCopy\n\n\t\t}\n\t\tcase 'ADD-TASK': {\n\t\t\tconst stateCopy = {...state};\n\t\t\tconst tasks = stateCopy[action.toDoListID]\n\t\t\tconst newTask: TaskType = {\n\t\t\t\tid: v1(),\n\t\t\t\ttitle: action.title,\n\t\t\t\tisDone: false\n\t\t\t}\n\t\t\tconst newTasks = [newTask, ...tasks]\n\t\t\tstateCopy[action.toDoListID] = newTasks\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase 'CHANGE-STATUS-TASK': {\n\t\t\tconst findToDoList = state[action.toDoListID];\n\t\t\tstate[action.toDoListID] = findToDoList\n\t\t\t\t.map(task => task.id === action.id ?\n\t\t\t\t\t{...task, isDone: action.isDone}\n\t\t\t\t\t:\n\t\t\t\t\ttask\n\t\t\t\t)\n\t\t\treturn ({...state})\n\t\t}\n\n\t\tcase 'CHANGE-TITLE-TASK': {\n\t\t\tconst findToDoList = state[action.toDoListID];\n\t\t\tstate[action.toDoListID] = findToDoList\n\t\t\t\t.map(task => task.id === action.id ?\n\t\t\t\t\t{...task, title: action.title}\n\t\t\t\t\t:\n\t\t\t\t\ttask\n\t\t\t\t)\n\t\t\treturn ({...state})\n\t\t}\n\t\tcase 'ADD-TODOLIST': {\n\t\t\tconst stateCopy = {...state};\n\n\t\t\tstateCopy[action.todolistId] = []\n\t\t\treturn stateCopy\n\n\t\t}\n\t\tcase 'REMOVE-TODOLIST': {\n\t\t\tconst stateCopy = {...state};\n\t\t\tdelete stateCopy[action.id]\n\t\t\treturn stateCopy\n\n\t\t}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const removeTaskAC = (taskID: string, todolistId: string): removeTaskACType => {\n\treturn {type: 'REMOVE-TASK', taskID, todolistId}\n}\n\nexport const addTaskAC = (title: string, toDoListID: string): addTaskACType => {\n\treturn {type: 'ADD-TASK', title, toDoListID}\n}\n\nexport const changeStatusTaskAC = (id: string, isDone: boolean, toDoListID: string): changeStatusTaskACType => {\n\treturn {type: 'CHANGE-STATUS-TASK', id, isDone, toDoListID}\n}\n\nexport const changeTitleTaskAC = (id: string, title: string, toDoListID: string): changeTitleTaskACType => {\n\treturn {type: 'CHANGE-TITLE-TASK', id, title, toDoListID}\n}\n\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from './TodoList';\r\nimport AddItemForm from './AddItemForm';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {Container, Grid, Paper} from '@material-ui/core';\r\nimport {\r\n\taddTodolistTitleAC,\r\n\tchangeTodolistFilterAC,\r\n\tchangeTodolistTitleAC,\r\n\tremoveTodolistAC,\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeStatusTaskAC, changeTitleTaskAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootState} from './state/store';\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TaskType = {\r\n\tid: string\r\n\ttitle: string\r\n\tisDone: boolean\r\n}\r\nexport type TodoListType = {\r\n\tid: string\r\n\ttitle: string\r\n\tfilter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n\r\n\tconst dispatch = useDispatch()\r\n\tconst toDoLists = useSelector<AppRootState, Array<TodoListType>>(state => state.todolists);\r\n\tconst tasks = useSelector<AppRootState, TaskStateType>(state => state.tasks);\r\n\r\n\r\n\tconst addTask = useCallback((title: string, toDoListID: string) => {\r\n\t\tconst action = addTaskAC(title, toDoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst removeTask = useCallback((id: string, toDoListID: string) => {\r\n\t\tconst action = removeTaskAC(id, toDoListID)\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeStatus = useCallback((id: string, isDone: boolean, toDoListID: string) => {\r\n\t\tconst action = changeStatusTaskAC(id, isDone, toDoListID);\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeTaskTitle = useCallback((id: string, newTitle: string, toDoListID: string) => {\r\n\t\tconst action = changeTitleTaskAC(id, newTitle, toDoListID);\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\r\n\tconst changeFilter = useCallback((value: FilterValuesType, toDoListID: string) => {\r\n\t\tconst action = changeTodolistFilterAC(value, toDoListID);\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst removeTodoList = useCallback((toDoListID: string) => {\r\n\t\tconst action = removeTodolistAC(toDoListID);\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst addNewToDoList = useCallback((title: string) => {\r\n\t\tconst action = addTodolistTitleAC(title);\r\n\t\tdispatch(action)\r\n\t}, [dispatch])\r\n\r\n\tconst changeTodoListTitle = useCallback((id: string, newTitle: string) => {\r\n\t\tconst action = changeTodolistTitleAC(id, newTitle)\r\n\t\tdispatch(action)\r\n\t}, [])\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\r\n\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t\t\t\t\t<MenuIcon/>\r\n\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t<Typography variant=\"h6\"></Typography>\r\n\t\t\t\t\t<Button color=\"inherit\">Login</Button>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\r\n\t\t\t<Container fixed>\r\n\t\t\t\t<Grid container style={{padding: '20px'}}>\r\n\t\t\t\t\t<AddItemForm addItem={addNewToDoList}/>\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Grid container spacing={10}>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttoDoLists.map(toDoList => {\r\n\t\t\t\t\t\tlet allTaskForTodoList = tasks[toDoList.id];\r\n\t\t\t\t\t\tlet tasksForTodoList = allTaskForTodoList;\r\n\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<Grid item>\r\n\t\t\t\t\t\t\t\t<Paper key={toDoList.id} style={{padding: '13px'}}>\r\n\t\t\t\t\t\t\t\t\t<TodoList title={toDoList.title}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoveTask={removeTask}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\taddTask={addTask}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeFilter={changeFilter}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeStatus={changeStatus}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfilter={toDoList.filter}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tid={toDoList.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={toDoList.id}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tremoveTodoList={removeTodoList}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeTaskTitle={changeTaskTitle}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tchangeTodoListTitle={changeTodoListTitle}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Paper>\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t</Grid>\r\n\t\t\t</Container>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default AppWithRedux;\r\n\r\n\r\n\r\n\r\n","import {combineReducers, createStore} from 'redux';\nimport {todolistsReducer} from './todolists-reducer';\nimport {tasksReducer} from './tasks-reducer';\n\n\nconst rootReducer = combineReducers({\n\ttodolists: todolistsReducer,\n\ttasks: tasksReducer\n})\n\n// type AppRootState = {\n// \ttodolists: Array<TodoListType>\n// \ttasks: TaskStateType\n// }\n\nexport type AppRootState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(rootReducer)\n\n\n\n\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<AppWithRedux />\r\n\t</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}