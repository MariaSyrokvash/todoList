{"version":3,"sources":["serviceWorker.ts","api/types.ts","api/todolists_api.ts","features/CommonActions/CommonActions.ts","utils/error-utils.ts","features/TodoLists/todolists-reducer.ts","features/TodoLists/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","features/TodoLists/TodoList/Task.tsx","features/TodoLists/TodoList/TodoList.tsx","features/Auth/selectors.ts","features/TodoLists/TodoLists.tsx","features/TodoLists/index.tsx","app/selectors.ts","features/Auth/Login.tsx","features/Auth/auth-reducer.ts","features/Auth/index.tsx","features/Application/application-reducer.ts","features/Application/index.tsx","app/store.ts","components/ErrorSnackBar/ErrorSnackBar.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","todolistId","delete","put","todoListId","taskID","taskId","model","authAPI","data","appActions","setAppStatus","createAction","setAppError","handleServerError","thunkAPI","showError","dispatch","error","messages","length","status","rejectWithValue","errors","fieldsErrors","handleNetworkError","message","undefined","fetchTodoList","createAsyncThunk","param","a","res","todolist","removeTodoList","changeTodolistEntityStatus","id","addTodoList","resultCode","item","changeTodolistTitle","asyncActions","slice","createSlice","name","initialState","reducers","changeTodolistFilter","state","action","index","findIndex","tl","payload","filter","entityStatus","extraReducers","builder","addCase","fulfilled","map","todo","splice","push","actions","fetchTasks","tasks","items","removeTask","addTask","toDoListID","task","updateTask","getState","find","apiModel","deadline","description","priority","startDate","domainModel","todolistsAsyncActions","forEach","unshift","reducer","AddItemForm","React","memo","disabled","addItem","useState","newTaskTitle","setTitle","setError","onCLickAddTaskHandler","trim","TextField","variant","label","value","onChange","event","currentTarget","onKeyPress","key","helperText","IconButton","onClick","color","EditableSpan","props","editMode","setEditMode","newEditableTitle","target","onBlur","onChangeInTitleTask","autoFocus","onDoubleClick","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","Task","tasksActions","changeValueHandler","useCallback","newValue","todoListID","className","Completed","Checkbox","checked","newIsDoneValue","New","console","log","Delete","TodoList","demo","todolistsActions","useEffect","onButtonClickFilterHandler","addTaskHandler","helper","thunk","resultAction","rejected","errorMessage","changeTodoListTitle","newTitle","tasksForTodoList","renderFilterButton","buttonFilter","text","Button","style","position","right","Typography","selectIsLoggedIn","auth","isLoggedIn","TodoLists","toDoLists","useSelector","todolists","addTodoListHandler","Grid","container","padding","spacing","toDoList","Paper","margin","width","to","todolistsSlice","tasksAsyncActions","tasksSlice","tasksReducer","todolistsReducer","selectStatus","app","selectIsInitialized","isInitialized","Login","login","authActions","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","result","setFieldError","field","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","FormGroup","handleBlur","getFieldProps","touched","type","FormControlLabel","control","logout","setIsLoggedIn","authReducer","initializedApp","appReducer","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","concat","logger","Alert","elevation","CustomizedSnackbars","handleClose","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","App","appSelectors","authSelectors","logoutHandler","AppBar","Toolbar","edge","aria-label","LinearProgress","Container","fixed","path","exact","render","from","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.67da56e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export type LoginParamsType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n\tcaptcha?: string\n}\n// types\nexport type TodolistType = {\n\tid: string\n\ttitle: string\n\taddedDate: string\n\torder: number\n}\nexport type FieldErrorType = { field: string; error: string }\n\nexport type GenericResponseType<D = {}> = {\n\tresultCode: number\n\tmessages: Array<string>\n\tfieldsErrors?: Array<FieldErrorType>\n\tdata: D\n}\n\nexport enum TaskStatuses {\n\tNew = 0,\n\tInProgress = 1,\n\tCompleted = 2,\n\tDraft = 3\n}\n\nexport enum TaskPriorities {\n\tLow = 0,\n\tMiddle = 1,\n\tHi = 2,\n\tUrgently = 3,\n\tLater = 4\n}\n\nexport type TaskType = {\n\tdescription: string\n\ttitle: string\n\tstatus: TaskStatuses\n\tpriority: TaskPriorities\n\tstartDate: string\n\tdeadline: string\n\tid: string\n\ttodoListId: string\n\torder: number\n\taddedDate: string\n}\nexport type UpdateTaskModelType = {\n\ttitle: string\n\tdescription: string\n\tstatus: TaskStatuses\n\tpriority: TaskPriorities\n\tstartDate: string\n\tdeadline: string\n}\nexport type GetTasksResponse = {\n\terror: string | null\n\ttotalCount: number\n\titems: TaskType[]\n}\n","import axios from 'axios';\nimport {GenericResponseType, GetTasksResponse, TaskType, TodolistType, UpdateTaskModelType} from './types';\n\nconst settings = {\n\twithCredentials: true,\n\theaders: {\n\t\t'API-KEY': '0e95a4fa-922c-4e5c-96fa-c712f53359b8'\n\t}\n}\n\nconst instance = axios.create({\n\tbaseURL: 'https://social-network.samuraijs.com/api/1.1/',\n\t...settings\n})\n\n\n\nexport const todolistsAPI = {\n\tgetTodolists: function () {\n\t\treturn instance.get<Array<TodolistType>>('todo-lists')\n\t},\n\n\tcreateTodolist(title: string) {\n\t\treturn instance.post<GenericResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\n\t},\n\n\tdeleteTodolist(todolistId: string) {\n\t\treturn instance.delete<GenericResponseType>(`todo-lists/${todolistId}`)\n\t},\n\n\tupdateTodolistTitle(todolistId: string, title: string) {\n\t\treturn instance.put<GenericResponseType>(`todo-lists/${todolistId}`, {title})\n\t},\n\n\tgetTasks(todoListId: string) {\n\t\treturn instance.get<GetTasksResponse>(`todo-lists/${todoListId}/tasks`)\n\t},\n\n\tdeleteTask(todolistId: string, taskID: string) {\n\t\tdebugger\n\t\treturn instance.delete<GenericResponseType>(`todo-lists/${todolistId}/tasks/${taskID}`)\n\t},\n\n\tcreateTask(todolistId: string, title: string) {\n\t\treturn instance.post<GenericResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n\t},\n\n\tupdateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n\t\treturn instance.put(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n\t}\n}\n\nexport type LoginParamsType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n\tcaptcha?: string\n}\n\nexport const authAPI = {\n\tlogin(data: LoginParamsType) {\n\t\tconst promise = instance.post<GenericResponseType<{userId?: number}>>('auth/login', data)\n\t\treturn promise\n\t},\n\tme() {\n\t\tconst promise = instance.get<GenericResponseType<{id: number; email: string; login: string}>>('auth/me')\n\t\treturn promise\n\t},\n\tlogout() {\n\t\tconst promise = instance.delete<GenericResponseType<{userId?: number}>>('auth/login')\n\t\treturn promise\n\t}\n}","import {createAction} from '@reduxjs/toolkit'\nimport {RequestStatusType} from '../Application/application-reducer'\n\n\nconst setAppStatus = createAction<{status: RequestStatusType}>('appActions/setAppStatus')\nconst setAppError = createAction<{error: string | null}>('appActions/setAppError')\n\nexport const appActions = {\n\tsetAppStatus,\n\tsetAppError\n}\n","import {AxiosError} from 'axios';\nimport {GenericResponseType} from '../api/types';\nimport {appActions} from '../features/CommonActions/CommonActions';\n\ntype ThunkAPIType = {\n\tdispatch: (action: any) => any\n\trejectWithValue: Function\n}\n\nexport const handleServerError = <R>(data: GenericResponseType<R>, thunkAPI: ThunkAPIType, showError = true) => {\n\tif (showError) {\n\t\tthunkAPI.dispatch(appActions.setAppError({error: data.messages.length ? data.messages[0] : 'Sorry, some error occurred'}))\n\t}\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\n\n\treturn thunkAPI.rejectWithValue({errors: data.messages, fieldsErrors: data.fieldsErrors})\n}\n\nexport const handleNetworkError = (error: AxiosError, thunkAPI: ThunkAPIType, showError = true) => {\n\tif (showError) {\n\t\tthunkAPI.dispatch(appActions.setAppError(error.message ? {error: error.message} : {error: 'Some error occurred!'}))\n\t}\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'failed'}))\n\n\treturn thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\n}","import {todolistsAPI} from '../../api/todolists_api';\nimport {RequestStatusType} from '../Application';\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils';\nimport {ThunkError} from '../../utils/types';\nimport {TodoListType} from '../../app/App';\nimport {appActions} from '../CommonActions/CommonActions';\n\n\nexport type removeTodoListActionType = ({ type: 'REMOVE-TODOLIST', id: string })\nexport type addTodoListActionType = ({ type: 'ADD-TODOLIST', todolist: TodoListType })\ntype changeTodoListTitleActionType = ({ type: 'CHANGE-TODOLIST-TITLE', title: string, id: string })\ntype changeTodoListFilterActionType = ({ type: 'CHANGE-TODOLIST-FILTER', filter: FilterValuesType, id: string })\nexport type setTodoListsActionType = ({ type: 'SET-TODOLIST', todolist: Array<TodoListType> })\ntype changeTodolistEntityStatusACType = ({ type: 'CHANGE-TODOLIST-ENTITY-STATUS', id: string, status: RequestStatusType })\nexport type FilterValuesType = 'all' | 'completed' | 'active'\nexport type TodolistDomainType = TodoListType & {\n\tfilter: FilterValuesType\n\tentityStatus: RequestStatusType\n}\n\ntype ActionsType =\n\tremoveTodoListActionType\n\t| addTodoListActionType\n\t| changeTodoListTitleActionType\n\t| changeTodoListFilterActionType\n\t| setTodoListsActionType\n\t| changeTodolistEntityStatusACType\n\n\nconst fetchTodoList = createAsyncThunk<{ todolist: TodoListType[] }, undefined, ThunkError>('todolists/fetchTodoList', async (param, thunkAPI) => {\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\n\ttry {\n\t\tconst res = await todolistsAPI.getTodolists()\n\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\treturn {todolist: res.data}\n\t} catch (error) {\n\t\treturn handleNetworkError(error, thunkAPI)\n\t}\n})\n\nconst removeTodoList = createAsyncThunk<{ todolistId: string }, string, ThunkError>('todolists/removeTodolist', async (todolistId, {\n\tdispatch,\n\trejectWithValue\n}) => {\n\t//изменим глобальный статус приложения, чтобы вверху полоса побежала\n\tdispatch(appActions.setAppStatus({status: 'loading'}))\n\t//изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n\tdispatch(changeTodolistEntityStatus({id: todolistId, status: 'loading'}))\n\tconst res = await todolistsAPI.deleteTodolist(todolistId)\n\t//скажем глобально приложению, что асинхронная операция завершена\n\tdispatch(appActions.setAppStatus({status: 'succeeded'}))\n\treturn {todolistId: todolistId}\n})\n\nconst addTodoList = createAsyncThunk<{ todolist: TodoListType }, string, ThunkError>('todolists/addTodoList', async (title, thunkAPI) => {\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\n\ttry {\n\t\tconst res = await todolistsAPI.createTodolist(title)\n\t\tif (res.data.resultCode === 0) {\n\t\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\t\treturn {todolist: res.data.data.item}\n\t\t} else {\n\t\t\treturn handleServerError(res.data, thunkAPI, false)\n\t\t}\n\t} catch (err) {\n\t\treturn handleNetworkError(err, thunkAPI, false)\n\t}\n})\n\nconst changeTodolistTitle = createAsyncThunk('todolists/changeTodolistTitle', async (param: { title: string, id: string }, thunkAPI) => {\n\ttry {\n\t\tconst res = await todolistsAPI.updateTodolistTitle(param.id, param.title)\n\t\tif (res.data.resultCode === 0) {\n\t\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\t\treturn {title: param.title, id: param.id}\n\t\t} else {\n\t\t\treturn handleServerError(res.data, thunkAPI, true)\n\t\t}\n\t} catch (err) {\n\t\treturn handleNetworkError(err, thunkAPI, false)\n\t}\n})\n\n\nexport const asyncActions = {\n\tfetchTodoList,\n\tremoveTodoList,\n\taddTodoList,\n\tchangeTodolistTitle,\n}\n\nexport const slice = createSlice({\n\tname: 'todolists',\n\tinitialState: [] as Array<TodolistDomainType>,\n\treducers: {\n\t\tchangeTodolistFilter(state, action: PayloadAction<{ filter: FilterValuesType, id: string }>) {\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\n\t\t\tstate[index].filter = action.payload.filter\n\t\t},\n\t\tchangeTodolistEntityStatus(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\n\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\n\t\t\tstate[index].entityStatus = action.payload.status\n\t\t},\n\t},\n\textraReducers: (builder => {\n\t\tbuilder\n\t\t\t.addCase(fetchTodoList.fulfilled, (state, action) => {\n\t\t\t\treturn action.payload.todolist.map(todo => ({...todo, filter: 'all', entityStatus: 'idle'}))\n\t\t\t})\n\t\t\t.addCase(removeTodoList.fulfilled, (state, action) => {\n\t\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.todolistId)\n\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tstate.splice(index, 1)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.addCase(addTodoList.fulfilled, (state, action) => {\n\t\t\t\tstate.push({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n\t\t\t})\n\t\t\t.addCase(changeTodolistTitle.fulfilled, (state, action) => {\n\t\t\t\tconst index = state.findIndex(tl => tl.id === action.payload.id)\n\t\t\t\tstate[index].title = action.payload.title\n\t\t\t})\n\t})\n})\nexport const {\n\tchangeTodolistEntityStatus,\n\tchangeTodolistFilter,\n} = slice.actions","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {todolistsAPI} from '../../api/todolists_api';\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils';\nimport {asyncActions as todolistsAsyncActions} from './todolists-reducer';\nimport {TaskStateType} from '../../app/App';\nimport {AppRootState, ThunkError} from '../../utils/types';\nimport {TaskType, UpdateTaskModelType} from '../../api/types';\nimport {appActions} from '../CommonActions/CommonActions';\n\nconst initialState: TaskStateType = {}\n\nexport const fetchTasks = createAsyncThunk<{ tasks: TaskType[], todolistId: string }, string, ThunkError>('tasks/fetchTasks', async (todolistId, thunkAPI) => {\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\n\ttry {\n\t\tconst res = await todolistsAPI.getTasks(todolistId)\n\t\tconst tasks = res.data.items\n\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\treturn {tasks, todolistId}\n\t} catch (error) {\n\t\treturn handleServerError(error, thunkAPI)\n\t}\n})\n\nexport const removeTask = createAsyncThunk<{ taskId: string, todolistId: string }, { taskId: string, todolistId: string }, ThunkError>('tasks/removeTask',\n\tasync (param, thunkAPI) => {\n\tdebugger\n\t\tconst res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\n\t\treturn {taskId: param.taskId, todolistId: param.todolistId}\n\t})\n\n\nexport const addTask = createAsyncThunk<TaskType, { title: string, toDoListID: string }, ThunkError>('tasks/addTask', async (param,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t thunkAPI\n) => {\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\n\ttry {\n\t\tconst res = await todolistsAPI.createTask(param.toDoListID, param.title)\n\t\tif (res.data.resultCode === 0) {\n\t\t\tconst task = res.data.data.item\n\t\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\t\treturn task\n\t\t} else {\n\t\t\thandleServerError(res.data, thunkAPI, false)\n\t\t\treturn thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\n\t\t}\n\t} catch (err) {\n\t\treturn handleNetworkError(err, thunkAPI, false)\n\t}\n})\n\nexport const updateTask = createAsyncThunk('tasks/updateTask', async (param: { taskID: string, domainModel: UpdateDomainTaskModelType, toDoListID: string },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthunkAPI\n) => {\n\tconst state = thunkAPI.getState() as AppRootState\n\tconst task = state.tasks[param.toDoListID].find(task => task.id === param.taskID)\n\n\tif (!task) return thunkAPI.rejectWithValue(null)\n\n\tconst apiModel: UpdateTaskModelType = {\n\t\tdeadline: task.deadline,\n\t\tdescription: task.description,\n\t\tpriority: task.priority,\n\t\tstartDate: task.startDate,\n\t\ttitle: task.title,\n\t\tstatus: task.status,\n\t\t...param.domainModel\n\t}\n\ttry {\n\t\tconst res = await todolistsAPI.updateTask(param.toDoListID, param.taskID, apiModel)\n\t\tif (res.data.resultCode === 0) {\n\t\t\treturn param\n\t\t} else {\n\t\t\thandleServerError(res.data, thunkAPI)\n\t\t\treturn thunkAPI.rejectWithValue(null)\n\t\t}\n\t} catch (error) {\n\t\treturn handleNetworkError(error.message, thunkAPI)\n\t}\n})\n\nexport const asyncActions = {\n\tfetchTasks,\n\tremoveTask,\n\taddTask,\n\tupdateTask\n}\n\nexport const slice = createSlice({\n\tname: 'tasks',\n\tinitialState: initialState,\n\treducers: {},\n\textraReducers: (builder) => {\n\t\tbuilder\n\t\t\t.addCase(todolistsAsyncActions.addTodoList.fulfilled, (state, action) => {\n\t\t\t\tstate[action.payload.todolist.id] = []\n\t\t\t})\n\t\t\t.addCase(todolistsAsyncActions.removeTodoList.fulfilled, (state, action) => {\n\t\t\t\tdelete state[action.payload.todolistId]\n\t\t\t})\n\t\t\t.addCase(todolistsAsyncActions.fetchTodoList.fulfilled, (state, action) => {\n\t\t\t\taction.payload.todolist.forEach((todo: any) => {\n\t\t\t\t\tstate[todo.id] = []\n\t\t\t\t})\n\t\t\t})\n\t\t\t.addCase(fetchTasks.fulfilled, (state, action) => {\n\t\t\t\tstate[action.payload.todolistId] = action.payload.tasks\n\t\t\t})\n\t\t\t.addCase(removeTask.fulfilled, (state, action) => {\n\t\t\t\tdebugger\n\t\t\t\tconst tasks = state[action.payload.todolistId]\n\t\t\t\tconst index = tasks.findIndex(task => task.id === action.payload.taskId)\n\n\t\t\t\tif (index > -1) {\n\t\t\t\t\ttasks.splice(index, 1)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.addCase(addTask.fulfilled, (state, action) => {\n\t\t\t\tstate[action.payload.todoListId].unshift(action.payload)\n\t\t\t})\n\t\t\t.addCase(updateTask.fulfilled, (state, action) => {\n\t\t\t\tconst tasks = state[action.payload.toDoListID]\n\t\t\t\tconst index = tasks.findIndex(task => task.id === action.payload.taskID)\n\n\t\t\t\tif (index > -1) {\n\t\t\t\t\ttasks[index] = {...tasks[index], ...action.payload.domainModel}\n\t\t\t\t}\n\t\t\t})\n\t}\n})\n\n\nexport const tasksReducer = slice.reducer\n\nexport type UpdateDomainTaskModelType = {\n\ttitle?: string\n\tdescription?: string\n\tstatus?: number\n\tpriority?: number\n\tstartDate?: string\n\tdeadline?: string\n}","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from '@material-ui/core';\nimport AddCircleOutlineSharpIcon from '@material-ui/icons/AddCircleOutlineSharp';\n\nexport type AddItemFormHelpersType = {\n\tsetError: (error: string) => void\n\tsetTitle: (title: string) => void\n}\n\nexport type AddItemFormPropsType = {\n\taddItem: (title: string, helpers: AddItemFormHelpersType) => void\n\tdisabled?: boolean\n}\n\nconst AddItemForm = React.memo(function ({disabled = false, addItem}: AddItemFormPropsType) {\n\tconst [newTaskTitle, setTitle] = useState('');\n\tconst [error, setError] = useState<string | null>(null);\n\n\tconst onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tsetTitle(event.currentTarget.value)\n\t}\n\n\tconst onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\n\t\tif (error !== null) {\n\t\t\tsetError(null);\n\t\t}\n\t\tif (event.key === 'Enter') {\n\t\t\tonCLickAddTaskHandler();\n\t\t}\n\t}\n\n\tconst onCLickAddTaskHandler = async() => {\n\t\tif (newTaskTitle.trim() !== '') {\n\t\t\taddItem(newTaskTitle.trim(), {setError, setTitle});\n\t\t} else {\n\t\t\tsetError('This field is required')\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<TextField variant={'outlined'} id=\"outlined-basic\" label=\"Enter your task..\"\n\t\t\t\t\t\t\t\t value={newTaskTitle} onChange={onChangeHandler} onKeyPress={onKeyPressHandler}\n\t\t\t\t\t\t\t\t error={!!error}\n\t\t\t\t\t\t\t\t helperText={error}\n\t\t\t\t\t\t\t\t disabled={disabled}\n\t\t\t/>\n\t\t\t<IconButton onClick={onCLickAddTaskHandler} color={'primary'} disabled={disabled}>\n\t\t\t\t<AddCircleOutlineSharpIcon/>\n\t\t\t</IconButton>\n\t\t</div>\n\t)\n})\n\n\nexport default AddItemForm","import React, {ChangeEvent, useState} from 'react';\nimport {TextField} from '@material-ui/core';\n\nexport type EditableSpanPropsType = {\n\ttitle: string\n\tonChangeInTitleTask: (newValue: string) => void\n}\nexport  const EditableSpan = React.memo((props: EditableSpanPropsType) => {\n\tconst [editMode, setEditMode] = useState<boolean>(false);\n\tconst [title, setTitle] = useState<string>('');\n\n\tconst activateChangeMode = () => {\n\t\tsetEditMode(true)\n\t\tsetTitle(props.title)\n\t}\n\n\tconst disableChangeMode = () => {\n\t\tsetEditMode(false)\n\t\tprops.onChangeInTitleTask(title)\n\t}\n\n\tconst changeTitleIfEditModeHandler = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tconst newEditableTitle = event.target.value;\n\t\tsetTitle(newEditableTitle)\n\t}\n\n\treturn (\n\t\teditMode ?\n\t\t\t<TextField value={title} onChange={ changeTitleIfEditModeHandler } onBlur={ disableChangeMode } autoFocus/>\n\t\t\t:\n\t\t\t<span onDoubleClick={activateChangeMode}>{props.title}</span>\n\t)\n})","import {useDispatch} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators} from 'redux';\nimport {useMemo} from 'react';\nimport {AppDispatchType} from './types';\n\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n\nexport function useActions<T extends ActionCreatorsMapObject<any>>(actions: T) {\n\tconst dispatch = useAppDispatch()\n\n\tconst boundActions = useMemo(() => {\n\t\treturn bindActionCreators(actions, dispatch)\n\t}, [])\n\n\treturn boundActions\n}\n","import React, {ChangeEvent, useCallback} from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\nimport {IconButton} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {tasksActions} from '../index';\nimport {useActions} from '../../../utils/redux-utils';\nimport {TaskStatuses, TaskType} from '../../../api/types';\n\nexport type TaskPropsType = {\n\ttask: TaskType\n\ttodoListID: string\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n\tconst {removeTask, updateTask} = useActions(tasksActions)\n\n\tconst removeTaskHandler = () => {\n\t\tdebugger\n\t\tconsole.log(props.todoListID)\n\t\tconsole.log(props.task)\n\t\tremoveTask({taskId: props.task.id, todolistId: props.todoListID})\n\t}\n\tconst changeStatus = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tconst newIsDoneValue = event.currentTarget.checked\n\t\tupdateTask({\n\t\t\ttaskID: props.task.id,\n\t\t\tdomainModel: {status: newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New},\n\t\t\ttoDoListID: props.todoListID\n\t\t})\n\t}\n\n\tconst changeValueHandler = useCallback((newValue: string) => {\n\t\tupdateTask({\n\t\t\ttaskID: props.task.id,\n\t\t\tdomainModel: {title: newValue},\n\t\t\ttoDoListID: props.todoListID\n\t\t})\n\t}, [props.task.id, props.todoListID])\n\n\n\treturn <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'completed' : ''}>\n\t\t<Checkbox checked={props.task.status === TaskStatuses.Completed} onChange={changeStatus} color={'primary'}/>\n\n\t\t<EditableSpan title={props.task.title} onChangeInTitleTask={changeValueHandler}/>\n\t\t<IconButton onClick={removeTaskHandler} color={'primary'}><Delete/></IconButton>\n\t</li>\n\n})","import React, {useCallback, useEffect} from 'react';\nimport AddItemForm, {AddItemFormHelpersType} from '../../../components/AddItemForm/AddItemForm';\nimport {Button, IconButton, PropTypes, Typography} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan';\nimport {Task} from './Task';\nimport {tasksActions, todolistsActions} from '../index';\nimport {FilterValuesType} from '../../../app/App';\nimport {useActions, useAppDispatch} from '../../../utils/redux-utils';\nimport {TaskStatuses, TaskType} from '../../../api/types';\nimport {TodolistDomainType} from '../todolists-reducer';\n\ntype PropsType = {\n\ttodolist: TodolistDomainType\n\ttasks: Array<TaskType>\n\tdemo?: boolean\n}\n\nexport const TodoList = React.memo(function ({demo = false, ...props}: PropsType) {\n\tconst {changeTodolistFilter, removeTodoList, changeTodolistTitle} = useActions(todolistsActions)\n\tconst {fetchTasks} = useActions(tasksActions)\n\tconst dispatch = useAppDispatch()\n\n\tuseEffect(() => {\n\t\tif (demo) {\n\t\t\treturn\n\t\t}\n\t\tfetchTasks(props.todolist.id)\n\t}, [])\n\n\tconst onButtonClickFilterHandler = useCallback((filter: FilterValuesType) => changeTodolistFilter({\n\t\tfilter: filter,\n\t\tid: props.todolist.id\n\t}), [props.todolist.id])\n\n\tconst removeTodoListHandler = () => removeTodoList(props.todolist.id)\n\n\tconst addTaskHandler = useCallback(async (title: string, helper: AddItemFormHelpersType) => {\n\t\tconst thunk = tasksActions.addTask({title: title, toDoListID: props.todolist.id})\n\t\tconst resultAction = await dispatch(thunk)\n\n\t\tif (tasksActions.addTask.rejected.match(resultAction)) {\n\t\t\tif (resultAction.payload?.errors?.length) {\n\t\t\t\tconst errorMessage = resultAction.payload?.errors[0]\n\t\t\t\thelper.setError(errorMessage)\n\t\t\t} else {\n\t\t\t\thelper.setError('Some error occurred')\n\t\t\t}\n\t\t} else {\n\t\t\thelper.setTitle('')\n\t\t}\n\t}, [props.todolist.id])\n\n\tconst changeTodoListTitle = useCallback((newTitle: string) => changeTodolistTitle({\n\t\tid: props.todolist.id,\n\t\ttitle: newTitle\n\t}), [props.todolist.id])\n\n\tlet tasksForTodoList = props.tasks\n\n\tif (props.todolist.filter === 'completed') {\n\t\ttasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.New)\n\t}\n\n\tif (props.todolist.filter === 'active') {\n\t\ttasksForTodoList = props.tasks.filter(task => task.status === TaskStatuses.Completed)\n\t}\n\n\n\tconst renderFilterButton = (\n\t\tbuttonFilter: FilterValuesType,\n\t\tcolor: PropTypes.Color,\n\t\ttext: string\n\t) => {\n\t\treturn <Button onClick={() => onButtonClickFilterHandler(buttonFilter)} color={color}\n\t\t\t\t\t\t\t\t\t variant={props.todolist.filter === buttonFilter ? 'contained' : 'text'}>{text}</Button>\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<div style={{position: 'relative'}}>\n\t\t\t\t<IconButton onClick={removeTodoListHandler} color={'primary'}\n\t\t\t\t\t\t\t\t\t\tdisabled={props.todolist.entityStatus === 'loading'} style={{position: 'absolute', right: 0}}>\n\t\t\t\t\t<Delete/>\n\t\t\t\t</IconButton>\n\t\t\t\t<div className={'box'}>\n\t\t\t\t\t<Typography variant={'h5'}>\n\t\t\t\t\t\t<EditableSpan title={props.todolist.title} onChangeInTitleTask={changeTodoListTitle}/>\n\t\t\t\t\t</Typography>\n\t\t\t\t</div>\n\t\t\t\t<AddItemForm addItem={addTaskHandler} disabled={props.todolist.entityStatus === 'loading'}/>\n\t\t\t</div>\n\t\t\t<ul>\n\t\t\t\t{\n\t\t\t\t\ttasksForTodoList.map(task => {\n\t\t\t\t\t\treturn <Task\n\t\t\t\t\t\t\ttodoListID={props.todolist.id}\n\t\t\t\t\t\t\ttask={task}\n\t\t\t\t\t\t\tkey={task.id}\n\t\t\t\t\t\t/>\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\t{!tasksForTodoList.length && <span>Create your first task</span>}\n\t\t\t</ul>\n\t\t\t<div>\n\t\t\t\t{renderFilterButton('all', 'primary', 'All')}\n\t\t\t\t{renderFilterButton('active', 'default', 'Active')}\n\t\t\t\t{renderFilterButton('completed', 'secondary', 'Completed')}\n\t\t\t</div>\n\t\t</div>\n\t)\n})\n","import {AppRootState} from '../../utils/types';\n\nexport const selectIsLoggedIn = (state: AppRootState) => state.auth.isLoggedIn","import React, {useCallback, useEffect} from 'react';\nimport {Grid, Paper} from '@material-ui/core';\nimport {useSelector} from 'react-redux';\nimport AddItemForm, {AddItemFormHelpersType} from '../../components/AddItemForm/AddItemForm';\nimport {TodoList} from './TodoList/TodoList';\nimport {TaskStateType} from '../../app/App';\nimport {Redirect} from 'react-router-dom';\nimport {selectIsLoggedIn} from '../Auth/selectors';\nimport {todolistsActions} from './index';\nimport {useActions, useAppDispatch} from '../../utils/redux-utils';\nimport {AppRootState} from '../../utils/types';\nimport {TodolistDomainType} from './todolists-reducer';\n\n\ntype  PropsType = {\n\tdemo?: boolean\n}\n\nconst TodoLists: React.FC<PropsType> = ({demo = false}) => {\n\tconst toDoLists = useSelector<AppRootState, Array<TodolistDomainType>>(state => state.todolists);\n\tconst tasks = useSelector<AppRootState, TaskStateType>(state => state.tasks);\n\tconst isLoggedIn = useSelector<AppRootState, boolean>(selectIsLoggedIn)\n\tconst {fetchTodoList} = useActions(todolistsActions)\n\tconst dispatch = useAppDispatch()\n\n\tuseEffect(() => {\n\t\tif (demo || !isLoggedIn) {\n\t\t\treturn\n\t\t}\n\t\tfetchTodoList()\n\t}, [])\n\n\tconst addTodoListHandler = useCallback(async (title: string, helper: AddItemFormHelpersType) => {\n\t\tconst thunk = todolistsActions.addTodoList(title)\n\t\tconst resultAction = await dispatch(thunk)\n\n\t\tif (todolistsActions.addTodoList.rejected.match(resultAction)) {\n\t\t\tif (resultAction.payload?.errors?.length) {\n\t\t\t\tconst errorMessage = resultAction.payload?.errors[0]\n\t\t\t\thelper.setError(errorMessage)\n\t\t\t} else {\n\t\t\t\thelper.setError('Some error occurred')\n\t\t\t}\n\t\t} else {\n\t\t\thelper.setTitle('')\n\t\t}\n\t}, [])\n\n\tif (!isLoggedIn) {\n\t\treturn <Redirect to={'/login'}/>\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Grid container style={{padding: '20px'}}>\n\t\t\t\t<AddItemForm addItem={addTodoListHandler}/>\n\t\t\t</Grid>\n\t\t\t<Grid container spacing={10}>\n\t\t\t\t{\n\t\t\t\t\ttoDoLists.map((toDoList, index) => {\n\t\t\t\t\t\tlet allTaskForTodoList = tasks[toDoList.id];\n\t\t\t\t\t\tlet tasksForTodoList = allTaskForTodoList;\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Grid item key={index}>\n\t\t\t\t\t\t\t\t<Paper key={toDoList.id} style={{margin: '10px', width: '280px', padding: '10px'}}>\n\t\t\t\t\t\t\t\t\t<TodoList\n\t\t\t\t\t\t\t\t\t\ttodolist={toDoList}\n\t\t\t\t\t\t\t\t\t\ttasks={tasksForTodoList}\n\t\t\t\t\t\t\t\t\t\tkey={toDoList.id}\n\t\t\t\t\t\t\t\t\t\tdemo={demo}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Paper>\n\t\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Grid>\n\t\t</>\n\n\t);\n}\n\nexport default TodoLists;\n\n\n\n\n","import {slice as todolistsSlice} from './todolists-reducer';\nimport {slice as tasksSlice} from './tasks-reducer';\nimport {asyncActions as todolistsAsyncActions} from './todolists-reducer';\nimport {asyncActions as tasksAsyncActions} from './tasks-reducer'\nimport TodoLists from './TodoLists';\n\nconst todolistsActions = {\n\t...todolistsAsyncActions,\n\t...todolistsSlice.actions\n}\n\nconst tasksActions = {\n\t...tasksAsyncActions,\n\t...tasksSlice.actions\n}\n\nconst tasksReducer = tasksSlice.reducer\nconst todolistsReducer = todolistsSlice.reducer\n\nexport {\n\ttasksActions,\n\ttodolistsActions,\n\ttodolistsReducer,\n\ttasksReducer,\n\tTodoLists\n}","import {} from './store';\nimport {AppRootState} from '../utils/types';\n\nexport const selectStatus = (state: AppRootState) => state.app.status\nexport const selectIsInitialized = (state: AppRootState) => state.app.isInitialized","import React from 'react'\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\nimport {useFormik} from 'formik';\nimport {useSelector} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {selectIsLoggedIn} from './selectors';\nimport {authActions} from './index';\nimport {useActions, useAppDispatch} from '../../utils/redux-utils';\nimport {AppRootState} from '../../utils/types';\n\ntype FormikErrorType = {\n\temail?: string\n\tpassword?: string\n\trememberMe?: boolean\n}\n\ntype FormValuesType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n}\n\nexport const Login = () => {\n\tconst dispatch = useAppDispatch()\n\tconst {login} = useActions(authActions)\n\tconst isLoggedIn = useSelector<AppRootState, boolean>(selectIsLoggedIn)\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tpassword: '',\n\t\t\trememberMe: false\n\t\t},\n\t\tvalidate: (values) => {\n\t\t\tconst errors: FormikErrorType = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = 'Email is required';\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = 'Invalid email address';\n\t\t\t}\n\n\t\t\tif (!values.password) {\n\t\t\t\terrors.password = 'Password is required';\n\t\t\t} else if (values.password.length < 3) {\n\t\t\t\terrors.email = 'Password more than 3 symbols'\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\n\t\tonSubmit: async (values, formikHelpers) => {\n\t\t\tconst result = await dispatch(login(values))\n\t\t\tif (login.rejected.match(result)) {\n\t\t\t\tif (result.payload?.fieldsErrors?.length) {\n\t\t\t\t\tconst error = result.payload?.fieldsErrors[0]\n\t\t\t\t\tformikHelpers.setFieldError(error.field, error.error)\n\t\t\t\t}\n\t\t\t}\n\t\t\tformik.resetForm()\n\t\t},\n\t});\n\n\tif (isLoggedIn) {\n\t\treturn <Redirect to={'/'}/>\n\t}\n\n\treturn <Grid container justify=\"center\">\n\t\t<Grid item xs={4}>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<FormControl>\n\t\t\t\t\t<FormLabel>\n\t\t\t\t\t\t<p>To log in get registered\n\t\t\t\t\t\t\t<a href={'https://social-network.samuraijs.com/'}\n\t\t\t\t\t\t\t\t target={'_blank'}>here\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>or use common test account credentials:</p>\n\t\t\t\t\t\t<p>Email: free@samuraijs.com</p>\n\t\t\t\t\t\t<p>Password: free</p>\n\t\t\t\t\t</FormLabel>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tonBlur={formik.handleBlur}\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ?\n\t\t\t\t\t\t\t<div style={{color: 'red'}}>{formik.errors.email}</div> : null}\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\tonBlur={formik.handleBlur}\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ?\n\t\t\t\t\t\t\t<div style={{color: 'red'}}>{formik.errors.password}</div> : null}\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={'Remember me'}\n\t\t\t\t\t\t\tcontrol={<Checkbox\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n\t\t\t\t\t\t\t\tchecked={formik.values.rememberMe}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n\t\t\t\t\t</FormGroup>\n\t\t\t\t</FormControl>\n\t\t\t</form>\n\t\t</Grid>\n\t</Grid>\n}\n","import {authAPI, LoginParamsType} from '../../api/todolists_api';\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils';\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {AxiosError} from 'axios';\nimport {ThunkError} from '../../utils/types';\nimport {appActions} from '../CommonActions/CommonActions';\n\nconst initialState = {\n\tisLoggedIn: false\n}\n\nexport const login = createAsyncThunk<undefined, LoginParamsType,\n\tThunkError>('auth/login', async (data: LoginParamsType, thunkAPI) => {\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\n\ttry {\n\t\tconst res = await authAPI.login(data)\n\t\tif (res.data.resultCode === 0) {\n\t\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\t\treturn\n\t\t} else {\n\t\t\treturn handleServerError(res.data, thunkAPI)\n\t\t}\n\t} catch (err) {\n\t\tconst error: AxiosError = err\n\t\treturn handleNetworkError(error, thunkAPI)\n\t}\n})\n\nexport const logout = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\n\tthunkAPI.dispatch(appActions.setAppStatus({status: 'loading'}))\n\ttry {\n\t\tconst res = await authAPI.logout()\n\t\tif (res.data.resultCode === 0) {\n\t\t\tthunkAPI.dispatch(appActions.setAppStatus({status: 'succeeded'}))\n\t\t\treturn\n\t\t} else {\n\t\t\treturn handleServerError(res.data, thunkAPI)\n\t\t}\n\t} catch (error) {\n\t\treturn handleNetworkError(error.message, thunkAPI)\n\t}\n})\n\nexport const asyncActions = {\n\tlogout: logout,\n\tlogin: login\n}\n\nexport const slice = createSlice({\n\tname: 'auth',\n\tinitialState: initialState,\n\treducers: {\n\t\tsetIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\n\t\t\tstate.isLoggedIn = action.payload.value\n\t\t}\n\t},\n\textraReducers: builder => {\n\t\tbuilder\n\t\t\t.addCase(login.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoggedIn = true\n\t\t\t})\n\t\t\t.addCase(logout.fulfilled, (state, action) => {\n\t\t\t\tstate.isLoggedIn = false\n\t\t\t})\n\t}\n})\n\nexport const authReducer = slice.reducer\nexport const {setIsLoggedIn} = slice.actions","import * as authSelectors from './selectors'\nimport { Login } from './Login'\nimport {asyncActions, slice} from './auth-reducer'\n\nconst authActions = {\n\t...asyncActions,\n\t...slice.actions\n}\n\nconst authReducer = slice.reducer\n\nexport {\n\tauthSelectors,\n\tauthActions,\n\tauthReducer,\n\tLogin\n}","import {authAPI} from '../../api/todolists_api';\nimport {authActions} from '../Auth/';\nimport {createAsyncThunk, createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {appActions} from '../CommonActions/CommonActions';\n\n// idle - еще запроса не было\n// loading - ждем ответа от сервера\n// succeeded - ответ пришел, что все ок\n// failed - ответ пришел, что ошибка\n\nconst initialState: initialAppStateType = {\n\tstatus: 'idle',\n\terror: null,\n\tisInitialized: false\n}\n\nexport type initialAppStateType = {\n\tstatus: RequestStatusType,\n\terror: null | string,\n\tisInitialized: boolean\n}\n\nexport const initializedApp = createAsyncThunk('application/initializeApp', async (param, {dispatch}) => {\n\tconst res = await authAPI.me()\n\tif (res.data.resultCode === 0) {\n\t\tdispatch(authActions.setIsLoggedIn({value: true}))\n\t}\n\treturn\n})\n\nexport const asyncActions = {initializedApp: initializedApp}\n\n\nexport const slice = createSlice({\n\tname: 'app',\n\tinitialState: initialState,\n\treducers: {},\n\textraReducers: builder => {\n\t\tbuilder\n\t\t\t.addCase(initializedApp.fulfilled, (state, action) => {\n\t\t\t\tstate.isInitialized = true\n\t\t\t})\n\t\t\t.addCase(appActions.setAppStatus, (state, action) => {\n\t\t\t\tstate.status = action.payload.status\n\t\t\t})\n\t\t\t.addCase(appActions.setAppError, (state, action) => {\n\t\t\t\tstate.error = action.payload.error\n\t\t\t})\n\t}\n})\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\n// export const {setAppError, setAppStatus} = slice.actions\n// export type setErrorType = ReturnType<typeof setAppError>\n// export type setStatusType = ReturnType<typeof setAppStatus>\n","import * as appSelectors from '../../app/selectors'\nimport {slice} from './application-reducer'\nimport {asyncActions} from './application-reducer';\nimport {RequestStatusType as T1} from './application-reducer'\n\nconst appReducer = slice.reducer\nconst actions = slice.actions\nconst appActions = {\n\t...actions,\n\t...asyncActions\n}\n\nexport type RequestStatusType = T1\n\nexport {\n\tappSelectors,\n\tappActions,\n\tappReducer\n}","import {combineReducers} from 'redux';\nimport {tasksReducer, todolistsReducer} from '../features/TodoLists';\nimport thunk from 'redux-thunk';\nimport {appReducer} from '../features/Application';\nimport {configureStore} from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {authReducer} from '../features/Auth';\n\n\nexport const rootReducer = combineReducers({\n\ttodolists: todolistsReducer,\n\ttasks: tasksReducer,\n\tapp: appReducer,\n\tauth: authReducer\n})\n\n// export type rootReducerType = typeof rootReducer\n// export type AppRootState = ReturnType<typeof rootReducer>\n// export type AppDispatchType = typeof store.dispatch\n// export type ThunkError = {rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }}\n// export const store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport const store = configureStore({\n\treducer: rootReducer,\n\tmiddleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk).concat(logger)\n})\n\n// @ts-ignore\nwindow.store = store;\n\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\nimport {useSelector} from 'react-redux';\nimport {AppRootState} from '../../utils/types';\nimport {useActions} from '../../utils/redux-utils';\nimport {appActions} from '../../features/CommonActions/CommonActions';\n\nfunction Alert(props: AlertProps) {\n\treturn <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport function CustomizedSnackbars() {\n\tconst error = useSelector<AppRootState, string | null>((state) => state.app.error)\n\tconst {setAppError} = useActions(appActions)\n\tconst handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n\t\tif (reason === 'clickaway') {\n\t\t\treturn;\n\t\t}\n\t\tsetAppError({error: null})\n\t};\n\n\n\tconst isOpen = error !== null\n\n\treturn (\n\t\t<Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n\t\t\t<Alert onClose={handleClose} severity=\"error\">\n\t\t\t\t{error}\n\t\t\t</Alert>\n\t\t</Snackbar>\n\t);\n}","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport {CircularProgress, Container, LinearProgress} from '@material-ui/core';\r\nimport {useSelector} from 'react-redux';\r\nimport {CustomizedSnackbars} from '../components/ErrorSnackBar/ErrorSnackBar';\r\nimport {appActions, appSelectors} from '../features/Application';\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {authActions, authSelectors, Login} from '../features/Auth';\r\nimport {TodoLists} from '../features/TodoLists';\r\nimport {TaskType} from '../api/types';\r\nimport {useActions} from '../utils/redux-utils';\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodoListType = {\r\n\tid: string\r\n\ttitle: string\r\n\tfilter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n\t[key: string]: Array<TaskType>\r\n}\r\ntype  PropsType = {\r\n\tdemo?: boolean\r\n}\r\n\r\n\r\nexport const App: React.FC<PropsType> = ({demo = false}) => {\r\n\tconst status = useSelector(appSelectors.selectStatus)\r\n\tconst isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n\tconst isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\tconst {logout} = useActions(authActions)\r\n\tconst {initializedApp} = useActions(appActions)\r\n\r\n\tuseEffect(() => {\r\n\t\tinitializedApp()\r\n\t}, [])\r\n\r\n\tconst logoutHandler = useCallback(() => {\r\n\t\tlogout()\r\n\t}, [])\r\n\r\n\tif (!isInitialized) {\r\n\t\treturn <div className='circularProgressBox'><CircularProgress color=\"secondary\"/></div>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<div className=\"App\">\r\n\t\t\t\t<CustomizedSnackbars/>\r\n\t\t\t\t<AppBar position=\"static\">\r\n\t\t\t\t\t<Toolbar>\r\n\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n\t\t\t\t\t\t\t<MenuIcon/>\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t\t<Typography variant=\"h6\"></Typography>\r\n\t\t\t\t\t\t{isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n\t\t\t\t\t</Toolbar>\r\n\t\t\t\t</AppBar>\r\n\r\n\t\t\t\t{status === 'loading' && <LinearProgress/>}\r\n\r\n\t\t\t\t<Container fixed>\r\n\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path={'/todoList'} exact render={() => <Redirect to={'/'}/>}/>\r\n\t\t\t\t\t\t<Route path={'/'} exact render={() => <TodoLists demo={demo}/>}/>\r\n\t\t\t\t\t\t<Route path={'/login'} render={() => <Login/>}/>\r\n\t\t\t\t\t\t<Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n\t\t\t\t\t\t<Redirect from={'*'} to={'/404'}/>\r\n\t\t\t\t\t</Switch>\r\n\r\n\t\t\t\t</Container>\r\n\t\t\t</div>\r\n\t\t</>\r\n\r\n\t);\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './app/store';\r\nimport {App} from './app/App';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<BrowserRouter>\r\n\t\t\t<App />\r\n\t\t</BrowserRouter>\r\n\t</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}